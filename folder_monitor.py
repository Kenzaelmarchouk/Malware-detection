import argparse
import time
import numpy as np
from features_extraction import extract_features
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from models import models
from cuckoo import cuckoo

class MalwareDetector(FileSystemEventHandler):
    def __init__(self, models):
        self.models = models
    
    def on_created(self, event):
        if event.is_directory:
            return None
        filepath = event.src_path
        print(f"Created: {filepath}")
        time.sleep(1)
        self.predict(filepath)
            
    def on_modified(self, event):
        if event.is_directory:
            return None
        filepath = event.src_path
        print(f"Modified: {filepath}")
        time.sleep(1)
        self.predict(filepath)
        
    def predict(self, filepath):
        #sen file to cuckoo sandbox
        #cuckoo(filepath)
        features = extract_features(filepath)
        print(f'File: {filepath}, Features: {features}')
        for model in self.models:
            S=np.array(list(features.values()))
            reshaped_sample = S[np.newaxis, :]
            prediction = model.predict(reshaped_sample)
            model_name = model.__class__.__name__
            result = "malware" if prediction == 1 else "clean"
            print(f"Prediction from {model_name}: The file is predicted to be {result}.")

# Create the argument parser
parser = argparse.ArgumentParser()

# Add the command line arguments
parser.add_argument('--path', type=str, help='Path to directory to monitor')

# Parse the arguments
args = parser.parse_args()

if args.path is not None:
    models_to_use = [models[0], models[1]]  # Adjust the list of models to use as needed
    event_handler = MalwareDetector(models_to_use)
    observer = Observer()
    observer.schedule(event_handler, args.path, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
else:
    print("Please specify a directory to monitor using --path argument")
