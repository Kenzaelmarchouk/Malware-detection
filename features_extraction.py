import pefile

def extract_features(filepath):
    # Open the file in binary mode
    with open(filepath, 'rb') as f:
        # Read the file bytes
        file_bytes = f.read()

    # Create a PE object from the file bytes
    pe = pefile.PE(data=file_bytes)

    # Extract the required features
    ImageBase = pe.OPTIONAL_HEADER.ImageBase
    MajorOperatingSystemVersion = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
    Subsystem = pe.OPTIONAL_HEADER.Subsystem
    SizeOfStackReserve = pe.OPTIONAL_HEADER.SizeOfStackReserve
    SectionsMaxEntropy = max([section.get_entropy() for section in pe.sections])

    # Find the minimum size of all resources
    resource_sizes = []
    for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
        for resource in resource_type.directory.entries:
            if hasattr(resource, 'data'):
                resource_sizes.append(resource.data.struct.Size)
            else:
                resource_sizes.append(resource.directory.entries[0].data.struct.Size)

    ResourcesMinSize = min(resource_sizes)

    version_info_size = pe.get_dword_at_rva(pe.OPTIONAL_HEADER.DATA_DIRECTORY[pefile.DIRECTORY_ENTRY['IMAGE_DIRECTORY_ENTRY_RESOURCE']].VirtualAddress)
    VersionInformationSize = version_info_size if version_info_size > 0 else 0
    # Create a dictionary to store the features and their names
    feature_dict = {
        "ImageBase": ImageBase,
        "MajorOperatingSystemVersion": MajorOperatingSystemVersion,
        "Subsystem": Subsystem,
        "SizeOfStackReserve": SizeOfStackReserve,
        "SectionsMaxEntropy": SectionsMaxEntropy,
        "ResourcesMinSize": ResourcesMinSize,
        "VersionInformationSize": VersionInformationSize
    }
    return feature_dict
    
    #return [ImageBase, MajorOperatingSystemVersion, Subsystem, SizeOfStackReserve, SectionsMaxEntropy, ResourcesMinSize, VersionInformationSize]

