import psutil
import wmi
import win32com.client
wmi_obj = win32com.client.GetObject("winmgmts:")
c = wmi.WMI()
import warnings
import numpy as np
import re
import win32api
import win32con
import os
from features_extraction import extract_features
from models import models
from cuckoo import cuckoo

# Suppress UserWarning about unpickling estimator
warnings.filterwarnings("ignore", category=UserWarning, message="Trying to unpickle estimator")
#warnings.filterwarnings("error", category=UserWarning, message="The model was trained with feature names, but no feature names were provided.")
suspicious_pattern = re.compile(r".*\\(temp|AppData|Local Settings|Application Data)\\.*", re.IGNORECASE)


    
# Define the criteria for suspicious processes
def is_hidden(filepath):
    if not os.path.exists(filepath):
        return False
    # Convert filepath to absolute path
    abspath = os.path.abspath(filepath)
    # Get file attributes
    attrs = win32api.GetFileAttributes(abspath)
    # Check if file is hidden
    return attrs & win32con.FILE_ATTRIBUTE_HIDDEN
suspicious_criteria = [
    lambda proc: proc.cpu_percent(interval=1) > 50.0,
    lambda proc: proc.memory_percent() > 50.0,
    lambda proc: any(conn.status == psutil.CONN_LISTEN for conn in psutil.net_connections() if conn.pid == proc.pid),
    lambda proc: any(conn.raddr != () for conn in psutil.net_connections() if conn.pid == proc.pid),
    lambda proc: len(proc.connections()) > 10,
    lambda proc: proc.num_threads() > 5,
    lambda proc: proc.num_handles() > 5000,
    lambda proc: proc.exe() is not None and not is_hidden(proc.exe())
    
]

# Check for suspicious processes
# Detect suspicious processes

for proc in psutil.process_iter():
    if any(criteria(proc) for criteria in suspicious_criteria):
        print(f"Suspicious process found: {proc.name} (PID: {proc.pid})")
    
        try:
            #sen file to cuckoo sandbox
            #cuckoo(filepath)
            path = proc.exe()
            #path = proc.ExecutablePath
            #print(path)
            #extract features:
            features = extract_features(path)
            print(f'File: {path}, Features: {features}')
            S=np.array(list(features.values()))
            reshaped_sample = S[np.newaxis, :]
             # Apply the ML model to the features
            for m in models:
                with warnings.catch_warnings():
                    warnings.simplefilter("ignore")
                    result = m.predict(reshaped_sample)
                # Print the result
                if result == 1:
                    print(f"{path} is a malware according to {m.__class__.__name__}!!!!!!")
                else:
                    print(f"{path} is not a malware according to {m.__class__.__name__}.") 
        except :  
            print(f"Unable to access process {proc.pid}")  
        print("="*70)        
           
            